adc0	codefrag.c	/^PUBLIC void adc0()$/
add	hardop.c	/^PUBLIC void add(source, target)$/
addconst	codefrag.c	/^PUBLIC void addconst(offset, reg)$/
addglb	table.c	/^PUBLIC struct symstruct *addglb(name, type)$/
addloc	table.c	/^PUBLIC struct symstruct *addloc(name, type)$/
addlorg	table.c	/^PUBLIC struct symstruct *addlorg(name, type)$/
addoffset	genloads.c	/^PUBLIC void addoffset(source)$/
address	genloads.c	/^PUBLIC void address(source)$/
addstruct	type.c	/^PUBLIC struct typestruct *addstruct(structname)$/
addsym	table.c	/^PUBLIC void addsym(name, type, symptr)$/
adjlc	codefrag.c	/^PUBLIC void adjlc(offset, reg)$/
adjsp	codefrag.c	/^PUBLIC void adjsp(label)$/
andconst	codefrag.c	/^PUBLIC void andconst(offset)$/
assign	assign.c	/^PUBLIC void assign(source, target)$/
assignment_exp	express.c	/^PUBLIC struct nodestruct *assignment_exp()$/
bileaf	gencode.c	/^PUBLIC void bileaf(exp)$/
bitcount	gencode.c	/^PUBLIC fastin_pt bitcount(number)$/
blanks	scan.c	/^PUBLIC void blanks()$/
blanksident	preproc.c	/^PUBLIC bool_pt blanksident()$/
bssseg	codefrag.c	/^PUBLIC void bssseg()$/
bugerror	output.c	/^PUBLIC void bugerror(message)$/
bumplc	label.c	/^PUBLIC void bumplc()$/
bumplc2	label.c	/^PUBLIC void bumplc2()$/
bumplc3	label.c	/^PUBLIC void bumplc3()$/
call	function.c	/^PUBLIC void call(name)$/
casejump	codefrag.c	/^PUBLIC label_t casejump()$/
cast	assign.c	/^PUBLIC void cast(type, target)$/
castnode	exptree.c	/^PUBLIC struct nodestruct *castnode(type, nodeptr)$/
changesp	preserve.c	/^PUBLIC void changesp(newsp, absflag)$/
checknotinif	preproc.c	/^PUBLIC void checknotinif()$/
clearfunclabels	label.c	/^PUBLIC void clearfunclabels()$/
clearlabels	label.c	/^PUBLIC void clearlabels(patchbuf, patchtop)$/
clearswitchlabels	label.c	/^PUBLIC void clearswitchlabels()$/
closein	input.c	/^PUBLIC void closein()$/
closeout	output.c	/^PUBLIC void closeout()$/
clrBreg	codefrag.c	/^PUBLIC void clrBreg()$/
clrBreg	codefrag.c	/^PUBLIC void clrBreg()$/
cmp	glogcode.c	/^PUBLIC void cmp(source, target, pcondtrue)$/
codeinit	gencode.c	/^PUBLIC void codeinit()$/
colon	declare.c	/^PUBLIC void colon()$/
comDreg	codefrag.c	/^PUBLIC void comDreg()$/
comDreg	codefrag.c	/^PUBLIC void comDreg()$/
comment	codefrag.c	/^PUBLIC void comment()$/
comment	codefrag.c	/^PUBLIC void comment()$/
common	codefrag.c	/^PUBLIC void common(name)$/
compound	state.c	/^PUBLIC void compound()		/* have just seen "{" */$/
condop	glogcode.c	/^PUBLIC void condop(exp)$/
constexpression	loadexp.c	/^PUBLIC value_t constexpression()$/
constsym	table.c	/^PUBLIC struct symstruct *constsym(longconst)$/
cppscan	scan.c	/^PUBLIC void cppscan()$/
cseg	codefrag.c	/^PUBLIC void cseg()$/
ctoi	codefrag.c	/^PUBLIC void ctoi()$/
ctoi	codefrag.c	/^PUBLIC void ctoi()$/
dbitem	debug.c	/^PUBLIC void dbitem(item)$/
dbtype	debug.c	/^PUBLIC void dbtype(type)$/
debug	debug.c	/^PUBLIC void debug(exp)		/* sub-nodes must be leaves */$/
debugswap	debug.c	/^PUBLIC void debugswap()$/
decllist	declare.c	/^PUBLIC void decllist()$/
defbyte	codefrag.c	/^PUBLIC void defbyte()$/
defbyte	codefrag.c	/^PUBLIC void defbyte()$/
defdword	codefrag.c	/^PUBLIC void defdword()$/
define	preproc.c	/^PUBLIC void define()$/
definestring	preproc.c	/^PUBLIC void definestring(str)$/
deflabel	label.c	/^PUBLIC void deflabel(label)$/
deflong	codefrag.c	/^PUBLIC void deflong(value)$/
defnulls	codefrag.c	/^PUBLIC void defnulls(nullcount)$/
defstr	codefrag.c	/^PUBLIC label_t defstr(sptr, stop, dataflag)$/
defword	codefrag.c	/^PUBLIC void defword()$/
defword	codefrag.c	/^PUBLIC void defword()$/
defword	codefrag.c	/^PUBLIC void defword()$/
delsym	table.c	/^PUBLIC void delsym(symptr)$/
diveasy	codefrag.c	/^PUBLIC bool_pt diveasy(divisor, uflag)$/
docontrol	preproc.c	/^PUBLIC void docontrol()$/
dpseg	codefrag.c	/^PUBLIC void dpseg()$/
dseg	codefrag.c	/^PUBLIC void dseg()$/
dumpglbs	table.c	/^PUBLIC void dumpglbs()$/
dumplocs	table.c	/^PUBLIC void dumplocs()$/
dumpstrings	table.c	/^PUBLIC void dumpstrings()$/
entermac	preproc.c	/^PUBLIC void entermac()$/
eofin	scan.c	/^PUBLIC void eofin(message)$/
equ	codefrag.c	/^PUBLIC void equ(name, string)$/
equlab	codefrag.c	/^PUBLIC void equlab(label, offset)$/
error	output.c	/^PUBLIC void error(message)$/
error2error	output.c	/^PUBLIC void error2error(message1, message2)$/
errorloc	input.c	/^PUBLIC void errorloc()$/
etreeinit	exptree.c	/^PUBLIC void etreeinit()$/
even	codefrag.c	/^PUBLIC void even()$/
exchange	genloads.c	/^PUBLIC void exchange(source, target)$/
expression	express.c	/^PUBLIC struct nodestruct *expression()$/
exprsym	table.c	/^PUBLIC struct symstruct *exprsym(symptr)$/
extend	assign.c	/^PUBLIC void extend(target)$/
f_indirect	floatop.c	/^PUBLIC bool_pt f_indirect(target)$/
fatalerror	output.c	/^PUBLIC void fatalerror(message)$/
findlorg	table.c	/^PUBLIC struct symstruct *findlorg(name)$/
findstruct	table.c	/^PUBLIC struct symstruct *findstruct(name)$/
finishup	output.c	/^PUBLIC void finishup()$/
float1op	floatop.c	/^PUBLIC void float1op(op, source)$/
floatop	floatop.c	/^PUBLIC void floatop(op, source, target)$/
flushout	output.c	/^PUBLIC void flushout()$/
for	table.c	/^    for (i = 0; i < HASHTABSIZE; ++i)$/
for	table.c	/^for (tp = &ts[0]; tp < &ts[sizeof ts / sizeof ts[0]]; ++tp)$/
fpush	floatop.c	/^PUBLIC void fpush(source)$/
function	function.c	/^PUBLIC void function(source)$/
gch1	input.c	/^PUBLIC void gch1()$/
gethashptr	table.c	/^PUBLIC struct symstruct **gethashptr(sname)$/
gethighlabel	label.c	/^PUBLIC label_t gethighlabel()$/
getindexreg	genloads.c	/^PUBLIC store_pt getindexreg()$/
getlabel	label.c	/^PUBLIC label_t getlabel()$/
getlc	label.c	/^PUBLIC uoffset_t getlc()$/
globl	codefrag.c	/^PUBLIC void globl(name)$/
growheap	table.c	/^PUBLIC void growheap(size)$/
growobject	table.c	/^PUBLIC void *growobject(object, extra)$/
highbit	gencode.c	/^PUBLIC fastin_pt highbit(number)$/
holdstr	table.c	/^PUBLIC label_t holdstr(sptr, stop)$/
ifinit	preproc.c	/^PUBLIC void ifinit()$/
import	codefrag.c	/^PUBLIC void import(name)$/
incdec	hardop.c	/^PUBLIC void incdec(op, source)$/
include	input.c	/^PUBLIC void include()$/
indexadr	genloads.c	/^PUBLIC void indexadr(source, target)$/
indirec	genloads.c	/^PUBLIC void indirec(source)$/
initexpression	loadexp.c	/^PUBLIC void initexpression(type)$/
initout	output.c	/^PUBLIC void initout()$/
iscalartotype	type.c	/^PUBLIC struct typestruct *iscalartotype(scalar)$/
isident	scan.c	/^PUBLIC bool_pt isident()$/
itol	codefrag.c	/^PUBLIC void itol(reg)$/
jump	label.c	/^PUBLIC void jump(label)$/
jumpfalse	glogcode.c	/^PUBLIC void jumpfalse(exp, label)$/
jumptrue	glogcode.c	/^PUBLIC void jumptrue(exp, label)$/
justpushed	floatop.c	/^PUBLIC void justpushed(target)$/
lbranch	label.c	/^PUBLIC void lbranch(cond, label)$/
lcommlab	codefrag.c	/^PUBLIC void lcommlab(label)$/
lcommon	codefrag.c	/^PUBLIC void lcommon(name)$/
ldregargs	function.c	/^PUBLIC void ldregargs()$/
lea	codefrag.c	/^PUBLIC void lea(offset, sourcereg, targreg)$/
leafnode	exptree.c	/^PUBLIC struct nodestruct *leafnode(source)$/
leavemac	preproc.c	/^PUBLIC void leavemac()$/
limiterror	output.c	/^PUBLIC void limiterror(message)$/
listo	function.c	/^PUBLIC void listo(target, lastargsp)$/
listroot	function.c	/^PUBLIC void listroot(target)$/
load	genloads.c	/^PUBLIC void load(source, targreg)$/
loadany	genloads.c	/^PUBLIC void loadany(source)$/
loadconst	codefrag.c	/^PUBLIC void loadconst(offset, reg)$/
loadexpression	loadexp.c	/^PUBLIC struct typestruct *loadexpression(targreg, targtype)$/
loadpres	preserve.c	/^PUBLIC void loadpres(source, target)$/
loadreg	genloads.c	/^PUBLIC void loadreg(source, targreg)$/
loadretexpression	function.c	/^PUBLIC void loadretexpression()$/
logop	glogcode.c	/^PUBLIC void logop(exp)$/
long1op	longop.c	/^PUBLIC void long1op(op, target)$/
longop	longop.c	/^PUBLIC void longop(op, source, target)$/
lparen	declare.c	/^PUBLIC void lparen()$/
lslconst	codefrag.c	/^PUBLIC int lslconst(shift, reg)$/
lsrconst	codefrag.c	/^PUBLIC int lsrconst(shift, reg, uflag)$/
main	bcc-cc1.c	/^PUBLIC int main(argc, argv)$/
main	bcc.c	/^PUBLIC int main(argc, argv)$/
makeleaf	gencode.c	/^PUBLIC void makeleaf(exp)$/
makelessindirect	genloads.c	/^PUBLIC void makelessindirect(source)$/
modeasy	codefrag.c	/^PUBLIC bool_pt modeasy(divisor, uflag)$/
modstk	preserve.c	/^PUBLIC void modstk(newsp)$/
movereg	genloads.c	/^PUBLIC void movereg(source, targreg)$/
muleasy	codefrag.c	/^PUBLIC bool_pt muleasy(factor, reg)$/
namedlabel	label.c	/^PUBLIC struct symstruct *namedlabel()$/
needvarname	declare.c	/^PUBLIC void needvarname()$/
neg	hardop.c	/^PUBLIC void neg(target)$/
negDreg	codefrag.c	/^PUBLIC void negDreg()$/
negDreg	codefrag.c	/^PUBLIC void negDreg()$/
negreg	codefrag.c	/^PUBLIC void negreg(reg)$/
newlevel	table.c	/^PUBLIC void newlevel()$/
newtype	type.c	/^PUBLIC struct typestruct *newtype()$/
nextsym	scan.c	/^PUBLIC void nextsym()$/
node	exptree.c	/^PUBLIC struct nodestruct *node(t, p1, p2)$/
not	hardop.c	/^PUBLIC void not(target)$/
oldlevel	table.c	/^PUBLIC void oldlevel()$/
onstack	genloads.c	/^PUBLIC void onstack(target)$/
op1	hardop.c	/^PUBLIC void op1(op, source, target)$/
openio	input.c	/^PUBLIC void openio(argc, argv)$/
openout	output.c	/^PUBLIC void openout(oname)$/
opstring	codefrag.c	/^PUBLIC char *opstring(op)$/
ourfree	table.c	/^PUBLIC void ourfree(ptr)$/
ourmalloc	table.c	/^PUBLIC void *ourmalloc(nbytes)$/
outABX	codefrag.c	/^PUBLIC void outABX()$/
outadd	codefrag.c	/^PUBLIC void outadd()$/
outadd	codefrag.c	/^PUBLIC void outadd()$/
outaddsp	codefrag.c	/^PUBLIC void outaddsp()$/
outaddsp	codefrag.c	/^PUBLIC void outaddsp()$/
outadr	genloads.c	/^PUBLIC void outadr(adr)$/
outbyte	output.c	/^PUBLIC void outbyte(c)$/
outcalladr	codefrag.c	/^PUBLIC void outcalladr()$/
outcalladr	codefrag.c	/^PUBLIC void outcalladr()$/
outcalladr	codefrag.c	/^PUBLIC void outcalladr()$/
outccname	codefrag.c	/^PUBLIC void outccname(name)$/
outcmp	codefrag.c	/^PUBLIC void outcmp()$/
outcmp	codefrag.c	/^PUBLIC void outcmp()$/
outcomma	output.c	/^PUBLIC void outcomma()$/
outcond	label.c	/^PUBLIC void outcond(cond)$/
outcpplinenumber	output.c	/^PUBLIC void outcpplinenumber(nr, fname, str)$/
outcregname	genloads.c	/^PUBLIC void outcregname(reg)$/
outdec	codefrag.c	/^PUBLIC void outdec()$/
outdec	codefrag.c	/^PUBLIC void outdec()$/
outdirectpage	codefrag.c	/^PUBLIC void outdirectpage()$/
outdword	codefrag.c	/^PUBLIC void outdword()$/
outextended	codefrag.c	/^PUBLIC void outextended()$/
outfail	codefrag.c	/^PUBLIC void outfail()$/
outfail	codefrag.c	/^PUBLIC void outfail()$/
outhex	output.c	/^PUBLIC void outhex(num)$/
outhexdigs	output.c	/^PUBLIC void outhexdigs(num)$/
outhiaccum	codefrag.c	/^PUBLIC void outhiaccum()$/
outimadj	codefrag.c	/^PUBLIC void outimadj(offset, targreg)$/
outimmadr	codefrag.c	/^PUBLIC void outimmadr(offset)$/
outimmed	codefrag.c	/^PUBLIC void outimmed()$/
outinc	codefrag.c	/^PUBLIC void outinc()$/
outinc	codefrag.c	/^PUBLIC void outinc()$/
outindframereg	codefrag.c	/^PUBLIC void outindframereg()$/
outindleft	codefrag.c	/^PUBLIC void outindleft()$/
outindleft	codefrag.c	/^PUBLIC void outindleft()$/
outindleft	codefrag.c	/^PUBLIC void outindleft()$/
outindright	codefrag.c	/^PUBLIC void outindright()$/
outindright	codefrag.c	/^PUBLIC void outindright()$/
outindright	codefrag.c	/^PUBLIC void outindright()$/
outindstackreg	codefrag.c	/^PUBLIC void outindstackreg()$/
outjumpstring	codefrag.c	/^PUBLIC void outjumpstring()$/
outlabel	label.c	/^PUBLIC void outlabel(label)$/
outldaccum	codefrag.c	/^PUBLIC void outldaccum()$/
outldaccum	codefrag.c	/^PUBLIC void outldaccum()$/
outldmulreg	codefrag.c	/^PUBLIC void outldmulreg()$/
outldmulreg	codefrag.c	/^PUBLIC void outldmulreg()$/
outlea	codefrag.c	/^PUBLIC void outlea()$/
outlea	codefrag.c	/^PUBLIC void outlea()$/
outleasp	codefrag.c	/^PUBLIC void outleasp()$/
outleasp	codefrag.c	/^PUBLIC void outleasp()$/
outline	output.c	/^PUBLIC void outline(s)$/
outload	codefrag.c	/^PUBLIC void outload()$/
outload	codefrag.c	/^PUBLIC void outload()$/
outlongendian	longop.c	/^PUBLIC void outlongendian()$/
outminus	output.c	/^PUBLIC void outminus()$/
outmulmulreg	codefrag.c	/^PUBLIC void outmulmulreg()$/
outmulmulreg	codefrag.c	/^PUBLIC void outmulmulreg()$/
outnbyte	output.c	/^PUBLIC void outnbyte(byte)$/
outnccname	codefrag.c	/^PUBLIC void outnccname(name)$/
outncimmadr	codefrag.c	/^PUBLIC void outncimmadr(offset)$/
outncregname	genloads.c	/^PUBLIC void outncregname(reg)$/
outncspregname	codefrag.c	/^PUBLIC void outncspregname()$/
outnhex	output.c	/^PUBLIC void outnhex(num)$/
outnl	output.c	/^PUBLIC void outnl()$/
outnlabel	label.c	/^PUBLIC void outnlabel(label)$/
outnop1str	output.c	/^PUBLIC void outnop1str(s)$/
outnop2str	output.c	/^PUBLIC void outnop2str(s)$/
outnregname	genloads.c	/^PUBLIC void outnregname(reg)$/
outnstr	output.c	/^PUBLIC void outnstr(s)$/
outntypechar	type.c	/^PUBLIC void outntypechar(type)$/
outoffset	codefrag.c	/^PUBLIC void outoffset(offset)$/
outofmemoryerror	table.c	/^PUBLIC void outofmemoryerror(message)$/
outop0str	output.c	/^PUBLIC void outop0str(s)$/
outop1str	output.c	/^PUBLIC void outop1str(s)$/
outop2str	output.c	/^PUBLIC void outop2str(s)$/
outop3str	output.c	/^PUBLIC void outop3str(s)$/
outopsep	codefrag.c	/^PUBLIC void outopsep()$/
outopsep	codefrag.c	/^PUBLIC void outopsep()$/
outplus	output.c	/^PUBLIC void outplus()$/
outpshs	codefrag.c	/^PUBLIC void outpshs()$/
outpshs	codefrag.c	/^PUBLIC void outpshs()$/
outpuls	codefrag.c	/^PUBLIC void outpuls()$/
outpuls	codefrag.c	/^PUBLIC void outpuls()$/
outregname	genloads.c	/^PUBLIC void outregname(reg)$/
outreturn	codefrag.c	/^PUBLIC void outreturn()$/
outreturn	codefrag.c	/^PUBLIC void outreturn()$/
outshex	output.c	/^PUBLIC void outshex(num)$/
outshortregname	genloads.c	/^PUBLIC void outshortregname(reg)$/
outstore	codefrag.c	/^PUBLIC void outstore()$/
outstore	codefrag.c	/^PUBLIC void outstore()$/
outstr	output.c	/^PUBLIC void outstr(s)$/
outsub	codefrag.c	/^PUBLIC void outsub()$/
outsub	codefrag.c	/^PUBLIC void outsub()$/
outswoffset	state.c	/^PUBLIC void outswoffset (offset)$/
outswstacklab	state.c	/^PUBLIC void outswstacklab()$/
outtab	output.c	/^PUBLIC void outtab()$/
outtest	codefrag.c	/^PUBLIC void outtest()$/
outtest	codefrag.c	/^PUBLIC void outtest()$/
outudec	output.c	/^PUBLIC void outudec(num)$/
outuvalue	output.c	/^PUBLIC void outuvalue(num)$/
outvalue	output.c	/^PUBLIC void outvalue(num)$/
outword	codefrag.c	/^PUBLIC void outword()$/
pointat	genloads.c	/^PUBLIC void pointat(target)$/
pointype	type.c	/^PUBLIC struct typestruct *pointype(type)$/
popframe	function.c	/^PUBLIC void popframe()$/
poplist	genloads.c	/^PUBLIC void poplist(reglist)$/
predefine	preproc.c	/^PUBLIC void predefine()$/
prefix	type.c	/^PUBLIC struct typestruct *prefix(constructor, size, type)$/
pres2	preserve.c	/^PUBLIC void pres2(source, target)$/
preserve	preserve.c	/^PUBLIC void preserve(source)$/
preslval	preserve.c	/^PUBLIC store_pt preslval(source, target)$/
program	declare.c	/^PUBLIC void program()$/
promote	type.c	/^PUBLIC struct typestruct *promote(type)$/
ptrsub	hardop.c	/^PUBLIC void ptrsub(source, target)$/
public	codefrag.c	/^PUBLIC void public(name)$/
push	genloads.c	/^PUBLIC void push(source)$/
pushlist	genloads.c	/^PUBLIC void pushlist(reglist)$/
pushreg	genloads.c	/^PUBLIC void pushreg(reg)$/
pushudec	output.c	/^PUBLIC char *pushudec(s, num)$/
qmalloc	table.c	/^PUBLIC void *qmalloc(size)$/
rbrace	declare.c	/^PUBLIC void rbrace()$/
rbracket	declare.c	/^PUBLIC void rbracket()$/
recovlist	preserve.c	/^PUBLIC void recovlist(reglist)$/
regexchange	codefrag.c	/^PUBLIC void regexchange(sourcereg, targreg)$/
regtransfer	codefrag.c	/^PUBLIC void regtransfer(sourcereg, targreg)$/
reslocals	function.c	/^PUBLIC void reslocals()$/
restoreopreg	codefrag.c	/^PUBLIC void restoreopreg()$/
ret	function.c	/^PUBLIC void ret()$/
rparen	declare.c	/^PUBLIC void rparen()$/
savedlineptr	preproc.c	/^PUBLIC char *savedlineptr()$/
saveopreg	codefrag.c	/^PUBLIC void saveopreg()$/
savereturn	preserve.c	/^PUBLIC void savereturn(savelist, saveoffset)$/
sbc0	codefrag.c	/^PUBLIC void sbc0()$/
sbranch	label.c	/^PUBLIC void sbranch(cond, label)$/
sctoi	codefrag.c	/^PUBLIC void sctoi()$/
sctoi	codefrag.c	/^PUBLIC void sctoi()$/
semicolon	declare.c	/^PUBLIC void semicolon()$/
set	codefrag.c	/^PUBLIC void set(name, value)$/
setoutbufs	output.c	/^PUBLIC void setoutbufs()$/
skipcomment	preproc.c	/^PUBLIC void skipcomment()$/
skipeol	input.c	/^PUBLIC void skipeol()$/
skipline	preproc.c	/^PUBLIC void skipline()$/
sl1	codefrag.c	/^PUBLIC void sl1(reg)$/
slconst	codefrag.c	/^PUBLIC void slconst(shift, reg)$/
softop	softop.c	/^PUBLIC void softop(op, source, target)$/
specialchar	input.c	/^PUBLIC void specialchar()$/
srconst	codefrag.c	/^PUBLIC void srconst(shift, uflag)$/
stoi	codefrag.c	/^PUBLIC void stoi()$/
storereg	genloads.c	/^PUBLIC void storereg(sourcereg, target)$/
stringorcharconst	scan.c	/^PUBLIC void stringorcharconst()$/
struc	genloads.c	/^PUBLIC void struc(source, target)$/
sub	hardop.c	/^PUBLIC void sub(source, target)$/
swapsym	table.c	/^PUBLIC void swapsym(sym1, sym2)$/
syminit	table.c	/^PUBLIC void syminit()$/
tounsigned	type.c	/^PUBLIC struct typestruct *tounsigned(type)$/
transfer	genloads.c	/^PUBLIC void transfer(source, targreg)$/
typeinit	type.c	/^PUBLIC void typeinit()$/
typename	declare.c	/^PUBLIC struct typestruct *typename()$/
uitol	codefrag.c	/^PUBLIC void uitol(reg)$/
unbumplc	label.c	/^PUBLIC void unbumplc()$/
undefinestring	preproc.c	/^PUBLIC void undefinestring(str)$/
ustoi	codefrag.c	/^PUBLIC void ustoi()$/

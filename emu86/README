*** WORK IN PROGRESS ***


EMU86 is yet another 8086/8088/80186/80188 emulator.

That old 16-bits processor architecture is still used in some devices
(micro-controllers, SBC, SoC, etc) that reuse the huge hardware and code
base from the legacy PC/XT/AT platform.

This emulator is intended to help the related embedded software development,
at the stage of testing / debugging the code on the development system before
burning it into EEPROM / Flash on the device.

The goal is NOT to reinvent the wheel for PC / end-user emulation, as others
projects like QEMU, DOSEMU, etc, already do that job very well. Therefore
some features like the 80286 protected mode and the 32/64 bits modes are out
of this project scope.

The emulator has a modular design with:
- an instruction decoder and printer (common part with DIS86 disassembler)
- a processor context and instruction executor (core emulator part)
- a memory & I/O access handler for peripheral stubbing
- an interrupt handler for firmware (BIOS) stubbing
- some debugger features


CURRENT STATUS:

The emulator is now able to execute the MON86 code, targetting the Advantech
SNMP-1000 SBC with INT 10h / 16h minimal stubs, except the X2 command (execute).

Debugger features: initial breakpoint, prompt, registers dump, trace in,
trace over, stack dump.

Serial port is emulated through a pseudo terminal (/dev/pts), with a related
bidirectional cat utility (pcat) to be able to redirect serial I/O from / to
file and ease the test automation (see test-mon86 script).


TODO:

* Core:
- more support of the 8086 instruction set
- option to override initial CS:IP
- option for base address where to load the binary file
- option to put initial breakpoint

* Embedded systems:
- add 80186 instruction set
- add 80186 integrated peripherals (timer, serial)
- add EEPROM / Flash emulation

The goal is to provide the minimum set of features needed to run a standalone
version of MON86 targetting any 80186/80188 based system.

* Legacy platform:
- more support of BIOS interrupts

The goal is to provide the minimum set of features needed to run ELKS.
A good reference is the "8086tiny" project.
